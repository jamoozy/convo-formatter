package formatter;

import java.awt.Color;
import java.awt.Font;
import java.util.Iterator;
import java.util.Vector;

/**
 * <code>Messages</code> are logical combinations of a sender, time stamp, and
 * text with font. They are the small strings of text that you send back and
 * forth in IMs.
 * 
 * @author Andrew Correa
 */
public class Message implements Event
{
  /** The SN of the person who sent this message. */
  private final String sender;
  /** The time this Message was sent. */
  private final Timestamp time;
  /** The different parts of the message string. */
  private final Vector<Part> parts;
  /** The font color of the text of the message. */
  private Color color;
  /** The font of the message. */
  private final Font font;
  /** True if this was an auto-reply. */
  private final boolean auto;

  /**
   * Creates a new <code>Message</code>.&nbsp;Assumes black-on-white text.
   * 
   * @param sender
   *          Screen name of the sender.
   * @param time
   *          The time the message was sent.
   * @param message
   *          The text of the message.
   * @param auto
   *          Whether this is an auto-generated message or not.
   */
  public Message(String sender, Timestamp time, String message, boolean auto)
  {
    this(sender, time, message, Color.BLACK, new Font("arial", Font.PLAIN, 12),
        auto);
  }

  /**
   * Creates a new <code>Message</code>.
   * 
   * @param sender
   *          Screen name of the sender.
   * @param time
   *          The time the message was sent.
   * @param message
   *          The text of the message.
   * @param color
   *          The color of the text of the message.
   * @param font
   *          The font the message should be in.
   * @param auto
   *          Whether this is an auto-generated message or not.
   */
  public Message(String sender, Timestamp time, String message, Color color,
      Font font, boolean auto)
  {
    this.sender = sender;
    this.time = time;
    // this.message = message;
    parts = new Vector<Part>();
    if (message != null)
      parts.add(new Part(message, "Arial", Color.black, 12, false, false));
    this.color = color;
    this.font = font;
    this.auto = auto;
  }

  // //////////////////////////////////////////////////////////////////////////
  // --------------------------- Simple getters --------------------------- //
  // //////////////////////////////////////////////////////////////////////////

  /**
   * Gets the screenname of the sender of this message.
   * 
   * @return The screenname of the sender.
   */
  public String getSender()
  {
    return sender;
  }

  /**
   * Gets the text of the message sent. This method ignores any formatting
   * information stored with the string.
   * 
   * @return The text of the message, without any formatting information.
   */
  public String getMessage()
  {
    if (parts.size() == 0)
      return "";
    Iterator<Part> iter = parts.iterator();
    StringBuffer message = new StringBuffer(iter.next().message);
    while (iter.hasNext())
      message.append(iter.next().message);
    return message.toString();
  }

  /**
   * Gets the font Color of the message.
   * 
   * @return The font color of the message.
   */
  public Color getColor()
  {
    return color;
  }

  /**
   * Gets the font face of the message.
   * 
   * @return The font face.
   */
  public Font getFont()
  {
    return font;
  }

  /**
   * Gets the Time this message was sent.
   * 
   * @return The time the message was sent.
   */
  public Timestamp getTimestamp()
  {
    return time;
  }

  /**
   * Returns <code>true</code> when the <code>Message</code> is auto-generated
   * and <code>false</code> when it is not.
   * 
   * @return Whether this is an auto-generated message or not.
   */
  public boolean isAutoGenerated()
  {
    return auto;
  }

  // //////////////////////////////////////////////////////////////////////////////
  // --------------------------------- Append ---------------------------------
  // //
  // //////////////////////////////////////////////////////////////////////////////

  /**
   * Appends the text of the {@link String} to the end of this
   * <code>Message</code>
   * 
   * @param msg
   *          The text to append to the end of this <code>Message</code>.
   */
  public void append(String msg)
  {
    parts.add(new Part(msg, "Arial", Color.black, 12, false, false));
  }

  /**
   * Appends the text of the {@link String} to the end of this
   * <code>Message</code>
   * 
   * @param msg
   *          The text to append to the end of this <code>Message</code>.
   * @param f
   *          The font name of this part of the message.
   * @param c
   *          The color of this part of the message.
   */
  public void append(String msg, String f, Color c)
  {
    parts.add(new Part(msg, f, c, 12, false, false));
  }

  /**
   * Appends the text of the {@link String} to the end of this
   * <code>Message</code>
   * 
   * @param msg
   *          The text to append to the end of this <code>Message</code>.
   * @param f
   *          The font name of this part of the message.
   * @param c
   *          The color of this part of the message.
   * @param s
   *          The size of the font in pts.
   * @param b
   *          <code>true</code> if the appended part of the message is bold,
   *          <code>false</code> otherwise.
   * @param i
   *          <code>true</code> if the appended part of the message is
   *          italicized, <code>false</code> otherwise.
   */
  public void append(String msg, String f, Color c, int s, boolean b, boolean i)
  {
    parts.add(new Part(msg, f, c, s, b, i));
  }

  /**
   * Puts a simple newline at the end of the current message.
   */
  public void appendNewline()
  {
    parts.add(new Part("\n", "Arial", Color.black, 12, false, false));
  }

  @Override
  public String toString()
  {
    StringBuffer buf = new StringBuffer();
    buf.append(sender);
    buf.append(" ");
    buf.append(time);
    buf.append(": ");
    for (Iterator<Part> iter = parts.iterator(); iter.hasNext();)
      buf.append(iter.next().getMessage());
    return buf.toString();
  }

  // //////////////////////////////////////////////////////////////////////////////
  // --------------------------- Message Parts --------------------------------
  // //
  // //////////////////////////////////////////////////////////////////////////////

  /**
   * This is a part of a message. It allows individual parts of the message as a
   * whole to carry different formatting information. For example, one part
   * could be bold and italicized, while another is in a different font and a
   * different color.
   */
  public class Part
  {
    /** The text of the part. */
    String message;
    /** The font used. */
    String font;
    /** The color of this part. */
    Color c;
    /** The size of this part. */
    int size;
    /** Whether this part is bold. */
    boolean bold;
    /** Whether this part is italicized. */
    boolean italic;

    /**
     * Creates a new part. This should be added to the <code>parts Vector</code>
     * of the <code>Message</code> class.
     * 
     * @param msg
     *          The text to append to the end of this <code>Message</code>.
     * @param f
     *          The font name of this part of the message.
     * @param c
     *          The color of this part of the message.
     * @param s
     *          The size of the font in pts.
     * @param b
     *          <code>true</code> if the appended part of the message is bold,
     *          <code>false</code> otherwise.
     * @param i
     *          <code>true</code> if the appended part of the message is
     *          italicized, <code>false</code> otherwise.
     */
    public Part(String msg, String f, Color c, int s, boolean b, boolean i)
    {
      message = msg;
      font = f;
      color = c;
      size = s;
      bold = b;
      italic = i;
    }

    /**
     * Gets the message of the this part.
     */
    public String getMessage()
    {
      return message;
    }

    /**
     * Gets the font used.
     */
    public String getFont()
    {
      return font;
    }

    /**
     * Gets the color of this part.
     */
    public Color getColor()
    {
      return color;
    }

    /**
     * Gets the size of this message type.
     */
    public int getSize()
    {
      return size;
    }

    /**
     * Determines if this part is bold.
     */
    public boolean isBold()
    {
      return bold;
    }

    /**
     * Determines if this part is italicized.
     */
    public boolean isItalic()
    {
      return italic;
    }
  }
}
